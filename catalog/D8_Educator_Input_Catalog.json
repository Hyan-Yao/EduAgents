{
    "student_profile": {
        "student_background": "Total students: 100-150. Student level: Primarily undergraduate students. International/domestic ratio: ~60% domestic, ~40% international. Academic background: Mostly Computer Science, with some students from other engineering fields (e.g., Electrical, Industrial).",
        "aggregate_academic_performance": "Overall academic strength: Generally strong. Undergraduate-level readiness: Anticipated to be high based on student background and prerequisites. Experience variability: Varies in prior exposure to AI concepts, algorithms, and Python programming.",
        "anticipated_learner_needs_and_barriers": "Programming confidence: Most are comfortable with Python. Concept gaps: Some unfamiliarity with AI subfields such as search algorithms, logic reasoning, and probabilistic models. Tool gaps: Uneven experience with AI libraries and symbolic reasoning tools. Language needs: Some students may benefit from clarified mathematical modeling and algorithmic explanations. Math background: Minor gaps in probability theory and discrete mathematics."
    },
    "instructor_preferences": {
        "instructor_emphasis_intent": "Teaching focus: Emphasizes foundational AI concepts, including search, logic, probabilistic reasoning, and machine learning. Content style preference: Focuses on theoretical foundations with hands-on lab activities and problem-solving. Instructional intent: Develops students’ ability to apply AI techniques to problem-solving and decision-making.",
        "instructor_style_preferences": "Language background: Non-native English speaker with strong academic communication. Tone: Undergraduate-level formal; avoids overly casual expression. Script style: Direct and structured with clear transitions. Slide visuals: Prefers clarity—balanced density with bullet points and minimal clutter.",
        "instructor_focus_for_assessment": "Assessment type: Strong emphasis on exams, homework, in-class labs, and a project. Task format: Includes exams, coding assignments, theoretical problem sets, and projects. Real-world application: Explored through projects and lab-based exercises. Final exam: Included as part of course assessment."
    },
    "course_structure": {
        "course_learning_outcomes": "Students will be able to: Understand core AI concepts including search strategies, logic reasoning, and probabilistic models. Apply algorithms for search, planning, decision making, and learning. Solve AI problems using techniques such as Markov decision processes and reinforcement learning. Analyze AI models for correctness, performance, and applicability.",
        "total_number_of_weeks": "Total number of weeks: 16",
        "weekly_schedule_outline": "Weeks 1–2: Introduction to AI and Agent Architectures. Weeks 3–5: Search Algorithms and Constraint Satisfaction Problems. Weeks 6–7: Multi-Agent Search and Game Playing. Weeks 8–9: Logic Reasoning: Propositional and First-Order Logic. Weeks 10–11: Probabilistic Reasoning and Bayesian Networks. Weeks 12–13: Decision Making: MDPs and Reinforcement Learning. Weeks 14–15: Machine Learning and Deep Learning Basics. Week 16: Project Presentations and Final Review."
    },
    "assessment_design": {
        "assessment_format_preferences": "Assessment type preference: Exams, homework assignments, in-class labs, and project. Milestone structure: Project includes proposal, implementation, and final presentation. Final project expectation: A course project involving implementation of AI techniques. Question type preference: Mix of theoretical problem-solving and coding tasks. Application emphasis: Application of AI algorithms to diverse problem domains.",
        "assessment_delivery_constraints": "Final exam policy: A final exam is part of the course grade. Assessment pacing: Balanced distribution of exams, assignments, labs, and project milestones. LMS compatibility: All submissions via FIU’s Canvas LMS. Submission format: PDF documents and Python code submissions."
    },
    "teaching_constraints": {
        "platform_policy_constraints": "LMS platform: Canvas. Submission formats: PDF and code submissions. Policy compliance: Must comply with FIU accessibility, academic integrity, and copyright policies.",
        "ta_support_availability": "TA count: 1. TA responsibilities: Assist with grading, hold office hours, and provide coding support. TA technical role: Support for Python programming and AI algorithms. TA availability: Regular office hours and online Q&A sessions.",
        "instructional_delivery_context": "Session duration: 75 minutes. Delivery format: In-person, lecture-based with in-class labs and interactive problem-solving. Use of classroom tools: Python programming environments and AI problem-solving platforms. Instructional pacing: Moderate pace with a blend of theory and practical applications.",
        "max_slide_count": "50"
    },
    "institutional_requirements": {
        "program_learning_outcomes": "Reinforces student competencies in algorithmic thinking, AI problem-solving, reasoning under uncertainty, and foundational machine learning.",
        "academic_policies_and_institutional_standards": "Academic integrity: Must follow FIU’s Academic Integrity Policy. Accessibility: Complies with FIU disability accommodation policy. Copyright: Unauthorized sharing or recording of course content is prohibited. Canvas requirement: All instructional materials and submissions are managed through Canvas.",
        "department_syllabus_requirements": "Clearly stated course learning outcomes. Grading policy breakdown. Participation and assessment components. Weekly schedule outline. Required university policies (academic integrity, Title IX, accessibility, etc.)."
    },
    "prior_feedback": {
        "historical_course_evaluation_results": "Overall course rating: Generally positive; students appreciate the real-world orientation and relevance of the material. Preferred assessment structure: Students express strong support for project-based learning and dislike high-stakes final exams. Clarity concerns: Occasional feedback indicates that lecture pacing can feel fast in early weeks for students unfamiliar with certain tools."
    }
}