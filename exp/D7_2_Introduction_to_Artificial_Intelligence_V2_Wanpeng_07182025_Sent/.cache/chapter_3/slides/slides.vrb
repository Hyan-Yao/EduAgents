\frametitle{Depth-First Search (DFS) \& Uniform Cost Search (UCS)}
\begin{itemize}
        \item \textbf{Depth-First Search (DFS)}:
            \begin{itemize}
                \item \textbf{Description}: Explores as far as possible down one branch before backtracking using a LIFO strategy.
                \item \textbf{Key Characteristics}:
                    \begin{itemize}
                        \item \textbf{Completeness}: Not guaranteed; can get stuck in infinite branches.
                        \item \textbf{Optimality}: Not guaranteed to find the shortest path.
                        \item \textbf{Space Complexity}: $O(b \cdot m)$, where $m$ is the maximum depth of any path.
                    \end{itemize}
                \item \textbf{Example}: Finding a solution in a maze where paths can loop back.
                \item \textbf{Algorithmic Steps}:
                    \begin{enumerate}
                        \item Initialize a stack and push the initial state.
                        \item While the stack is not empty:
                            \begin{itemize}
                                \item Pop the top state.
                                \item If it is the goal state, return the path to this state.
                                \item Else, push all its child states (not visited).
                            \end{itemize}
                    \end{enumerate}
            \end{itemize}
    \end{itemize}

    \begin{block}{Uniform Cost Search (UCS)}
        \begin{itemize}
            \item \textbf{Description}: Expands the least-cost node first, prioritizing paths with the lowest cumulative cost.
            \item \textbf{Key Characteristics}:
                \begin{itemize}
                    \item \textbf{Completeness}: Guaranteed to find a solution if one exists.
                    \item \textbf{Optimality}: Guarantees the least-cost path solution.
                    \item \textbf{Space Complexity}: $O(b^d)$ (similar to BFS).
                \end{itemize}
            \item \textbf{Example}: Navigating a map with different distances between locations.
            \item \textbf{Algorithmic Steps}:
                \begin{enumerate}
                    \item Initialize a priority queue with the initial state, prioritized by cost.
                    \item While the priority queue is not empty:
                        \begin{itemize}
                            \item Dequeue the state with the lowest cost.
                            \item If it is the goal state, return the path and total cost.
                            \item Else, enqueue all its child states with their respective costs.
                        \end{itemize}
                \end{enumerate}
        \end{itemize}
    \end{block}
