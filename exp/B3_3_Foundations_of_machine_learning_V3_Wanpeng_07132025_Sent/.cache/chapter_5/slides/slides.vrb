\frametitle{Jupyter Notebooks and TensorFlow}
    \begin{itemize}
        \item \textbf{Jupyter Notebooks:}
        \begin{itemize}
            \item Provide a flexible interface for live code, equations, visualizations, and text.
            \item Allow interactive output and rich text support.
            \item Support various programming languages through Jupyter kernels.
        \end{itemize}

        \item \textbf{Example Use Case:} \\
        Data Visualization with Matplotlib
    \end{itemize}

    \begin{lstlisting}[language=Python]
import matplotlib.pyplot as plt

# Sample data
x = [0, 1, 2, 3, 4]
y = [0, 1, 4, 9, 16]

# Create a plot
plt.plot(x, y)
plt.title('Simple Plot')
plt.xlabel('X-axis')
plt.ylabel('Y-axis')
plt.grid()
plt.show()
    \end{lstlisting}

    \begin{itemize}
        \item \textbf{TensorFlow:}
        \begin{itemize}
            \item An open-source library for numerical computation and deep learning.
            \item Ideal for building complex models like neural networks.
            \item Offers scalability and a supportive ecosystem.
        \end{itemize}

        \item \textbf{Example Use Case:} \\
        Simple Neural Network for Image Classification
    \end{itemize}

    \begin{lstlisting}[language=Python]
import tensorflow as tf
from tensorflow.keras import layers, models

# Define the model
model = models.Sequential()
model.add(layers.Flatten(input_shape=(28, 28)))  # Flattening the input
model.add(layers.Dense(128, activation='relu'))   # Hidden layer
model.add(layers.Dense(10, activation='softmax'))  # Output layer

# Compile the model
model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
    \end{lstlisting}
