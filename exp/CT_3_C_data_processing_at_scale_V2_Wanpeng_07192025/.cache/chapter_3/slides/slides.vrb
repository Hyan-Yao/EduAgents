\frametitle{Transformations on RDDs}
    \begin{block}{Overview}
        Transformations create a new RDD from an existing one and are lazy operations.
        \begin{itemize}
            \item They do not compute their results until an action is invoked.
            \item This behavior allows Spark to optimize execution.
        \end{itemize}
    \end{block}

    \begin{enumerate}
        \item \textbf{Map}:
            \begin{lstlisting}
            numbers = sc.parallelize([1, 2, 3, 4])
            squares = numbers.map(lambda x: x * x)
            \end{lstlisting}
            Result: `squares` RDD will contain \([1, 4, 9, 16]\).

        \item \textbf{Filter}:
            \begin{lstlisting}
            even_numbers = numbers.filter(lambda x: x % 2 == 0)
            \end{lstlisting}
            Result: `even_numbers` RDD will contain \([2, 4]\).

        \item \textbf{FlatMap}:
            \begin{lstlisting}
            words = sc.parallelize(["Hello World", "Apache Spark"])
            flat_words = words.flatMap(lambda x: x.split(" "))
            \end{lstlisting}
            Result: `flat_words` RDD will contain \(["Hello", "World", "Apache", "Spark"]\).

        \item \textbf{Union}:
            \begin{lstlisting}
            rdd1 = sc.parallelize([1, 2, 3])
            rdd2 = sc.parallelize([4, 5, 6])
            union_rdd = rdd1.union(rdd2)
            \end{lstlisting}
            Result: `union_rdd` will contain \([1, 2, 3, 4, 5, 6]\).
    \end{enumerate}
